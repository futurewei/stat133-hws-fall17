#  @param x is a vector
#  @return the number of missing values
count_missing <- function(x){
which <- which(is.na(x))
return(length(which))
}
# @title summary_states()
# @description returns a list of summary statistics
# @param x a numeric vector
# @return a list of summary statistics
summary_stats<-function(x){
list <- list(
minimum = get_minimum(x),
percent10 = get_percentile10(x),
quartile1 = get_quartile1(x),
median = get_median(x),
mean = get_average(x),
quartile3 = get_quartile3(x),
percent90 = get_percentile90(x),
maximum = get_maximum(x),
range = get_range(x),
stdev = get_stdev(x),
missing = count_missing(x))
return(list)
}
# @title print_stats()
# @description print stats
# @param x a numeric vector
# @return nothing
print_stats <- function(x){
names <- names(summary_stats(x))
vals <- c(                     get_minimum(x),
get_percentile10(x),
get_quartile1(x),
get_median(x),
get_average(x),
get_quartile3(x),
get_percentile90(x),
get_maximum(x),
get_range(x),
get_stdev(x),
count_missing(x))
name <- format(names,width = 9,justify = "left")
value <- sprintf("%.4f", vals)
stats <- paste(name,": ",value,sep = "")
cat(stats,sep = "\n")
}
#  @title rescale100()
#  @description rescale value
#  @param x is a val
#  @return a scaled version
rescale100 <- function(x,xmin,xmax){
z <- 100*((x-xmin)/(xmax-xmin))
return(z)
}
#  @title drop_lowest()
#  @description drop lowest score
#  @param x is a vector
#  @return a vector with lowest score dropped.
drop_lowest <- function(x){
x <- sort(x)
x <- x[-1]
return(x)
}
#  @title score_homework()
#  @description calculate hw score for student
#  @param hws is a vector
#  @return a averaged value of homework scores
score_homework <- function(hws, drop=TRUE){
if(drop == TRUE)
{
hws <- drop_lowest(hws)
}
return (get_average(hws, TRUE))
}
#  @title score_quiz()
#  @description calculate lab score for student
#  @param x is a vector
#  @return a averaged value of quiz scores
score_quiz <- function(x,drop=TRUE){
if(drop == TRUE)
{
quiz <- drop_lowest(x)
}
return (get_average(quiz, TRUE))
}
#  @title score_lab()
#  @description calculate lab score for student
#  @param lab is a val
#  @return a corresponding score
score_lab <- function(lab){
if (lab ==10)
return (80)
else if (lab == 9)
return (60)
else if (lab == 8)
return (40)
else if (lab == 7)
return (20)
else if (lab == 11 | lab==12)
return (100)
else if(lab == 6 | lab < 6)
return (0)
}
# read in csv file with raw scores
source("functions.R")
original = read.csv('../data/rawdata/rawscores.csv',stringsAsFactors = FALSE)
raw_score = original
#head(raw_score)
sink(file='../output/summary-rawscores.txt')
str(original)
sink()
for(i in 1:16){
sink('../output/summary-rawscores.txt',append = TRUE)
print(summary_stats(raw_score[,i]))
print(print_stats(raw_score[,i]))
sink()
}
for (i in 1:nrow(raw_score)) {
for (j in 1:ncol(raw_score)) {
if (is.na(raw_score[i,j])==TRUE)
raw_score[i,j] <- 0
}
}
raw_score <- raw_score
raw_score$QZ1 <- rescale100(raw_score$QZ1,xmin = 0,xmax = 12)
raw_score$QZ2 <- rescale100(raw_score$QZ2,xmin = 0,xmax = 18)
raw_score$QZ3 <- rescale100(raw_score$QZ3,xmin = 0,xmax = 20)
raw_score$QZ4 <- rescale100(raw_score$QZ4,xmin = 0,xmax = 20)
raw_score$Test1 <- rescale100(raw_score$EX1,xmin=0,xmax = 80)
raw_score$Test2 <- rescale100(raw_score$EX2,xmin=0,xmax = 90)
hw <- raw_score[,1:9]
raw_score$Homework <- round(apply(hw, 1, score_homework,drop=TRUE),0)
quiz <- raw_score[,11:14]
raw_score$Quiz <- round(apply(quiz,1, score_quiz,drop=TRUE),0)
#Add Lab
raw_score$Lab <- as.numeric(lapply(raw_score$ATT,function(x) score_lab(x)))
#Add Overall
raw_score$Overall <- raw_score$Lab *0.1+0.3* raw_score$Homework +0.15*raw_score$Quiz+0.2*raw_score$Test1+0.25*raw_score$Test2
grade_assign <- function(score){
if (score >=0 & score < 50)
return ("F")
else if (score >=50 & score < 60)
return ("D")
else if (score >=60 & score < 70)
return ("C-")
else if (score >=70 & score < 77.5)
return ("C")
else if (score >=77.5 & score < 79.5)
return ("C+")
else if (score >=79.5 & score < 82)
return ("B-")
else if (score >=82 & score < 86)
return ("B")
else if (score >=86 & score < 88)
return ("B+")
else if (score >=88 & score < 90)
return ("A-")
else if (score >=90 & score < 95)
return ("A")
else if (score >=95 & score <= 100)
return ("A+")
}
for (i in 1: 334){
raw_score$grade[i] <- grade_assign(raw_score$Overall[i])
}
#Export summary
files <- c("Lab", "Homework", "Quiz", "Test1", "Test2", "Overall")
for(i in 1:6){
file = files[i]
sink (file = paste("../output/", file, "-stats.txt"))
# read df by name using [[]]
print(summary_stats(raw_score[[file]]))
print(print_stats(raw_score[[file]]))
sink()
}
sink(file='../output/summary-cleanscores.txt')
str(raw_score)
sink()
write.csv(raw_score, file = '../data/cleandata/cleanscores.csv')
library(shiny); runApp('~/Desktop/stat133-hws-fall17/hw04/app/Grade_visualizer.R')
runApp('~/Desktop/stat133-hws-fall17/hw04/app/Grade_visualizer.R')
#  @title remove-missing()
#  @description remove missing
#  @param x is a vector
#  @return a vector without missing val
remove_missing <- function(x){
x<-x[is.na(x)==FALSE]
return(x)
}
#  @title get_minimum()
#  @description get min value in vector
#  @param x is a vector
#  @return a min val
get_minimum <- function(x,na.rm=TRUE){
if (!is.numeric(x)) {
stop("x is not numeric")
}
if(na.rm==TRUE){
remove_missing(x)
}
x<-sort(x)
return(x[1])
}
#  @title get_maximum()
#  @description get max value in vector
#  @param x is a vector
#  @return a max val
get_maximum <- function(x,na.rm=TRUE){
if (!is.numeric(x)) {
stop("x is not numeric")
}
if(na.rm==TRUE){
remove_missing(x)
}
x<-sort(x,decreasing = TRUE)
return(x[1])
}
#  @title get_range()
#  @description get range of vector
#  @param x is a vector
#  @return a range val
get_range <- function(a, b=TRUE){
if (b==TRUE)
{
a <- remove_missing(a)
}
min <- get_minimum(a)
max <- get_maximum(a)
return (max - min)
}
#  @title get_percentile10()
#  @description get 10 percentile of vector
#  @param a is a vector
#  @return a percentile10 value
get_percentile10 <- function(a, b=TRUE) {
if (b == TRUE)
{
a<-remove_missing(a)
}
return (quantile(a,probs = 0.1,na.rm=TRUE))
}
#  @title get_percentile90()
#  @description get 90 percentile of vector
#  @param a is a vector
#  @return a percentile90 value
get_percentile90 <- function(a, b=TRUE){
if (b == TRUE)
{
a<-remove_missing(a)
}
return (quantile(a,probs = 0.9,na.rm=TRUE))
}
#  @title get_median()
#  @description get median from a vector
#  @param a is a vector
#  @return the medain value
get_median <- function(a, na=TRUE){
if (na == TRUE){
a <- remove_missing(a)
}
a <- sort(a)
median <- 0
if ((length(a) %% 2) == 0){
median = (a[length(a)/2] + a[length(a)/2+1])/2
}else{
median = a[length(a)/2 + 1]
}
return (median)
}
#  @title get_average()
#  @description get average from a vector
#  @param a is a vector
#  @return the average value
get_average <- function(a, na=TRUE){
if (na == TRUE)
{
a<- remove_missing(a)
}
count <- 0
sum <- 0
for (i in 1:length(a)){
count = count + 1
sum = sum + a[i]
}
result = sum/count
return (result)
}
#  @title get_stdev()
#  @description get standard deviation from a vector
#  @param a is a vector
#  @return the stdev value
get_stdev <- function(a, na=TRUE) {
if(na == TRUE){
a <- remove_missing(a)
}
avg <- get_average(a, TRUE)
sum <- 0
count <- 0
for (i in 1:length(a))
{
count = count + 1
sum = sum + ((a[i] - avg)*(a[i] - avg))
}
result = sqrt(sum /(count -1))
return (result)
}
#  @title get_quartile1()
#  @description get quartile1
#  @param a is a vector
#  @return the quartile1
get_quartile1<-function(a, b=TRUE){
if (b == TRUE)
{
a<-remove_missing(a)
}
return (quantile(a,probs = 0.25,na.rm=TRUE))
}
#  @title get_quartile3()
#  @description get quartile3
#  @param a is a vector
#  @return the quartile3
get_quartile3 <- function(a, b=TRUE){
if (b == TRUE)
{
a<-remove_missing(a)
}
return (quantile(a,probs = 0.75,na.rm=TRUE))
}
#  @title count_missing()
#  @description count how many missing vals
#  @param x is a vector
#  @return the number of missing values
count_missing <- function(x){
which <- which(is.na(x))
return(length(which))
}
# @title summary_states()
# @description returns a list of summary statistics
# @param x a numeric vector
# @return a list of summary statistics
summary_stats<-function(x){
list <- list(
minimum = get_minimum(x),
percent10 = get_percentile10(x),
quartile1 = get_quartile1(x),
median = get_median(x),
mean = get_average(x),
quartile3 = get_quartile3(x),
percent90 = get_percentile90(x),
maximum = get_maximum(x),
range = get_range(x),
stdev = get_stdev(x),
missing = count_missing(x))
return(list)
}
# @title print_stats()
# @description print stats
# @param x a numeric vector
# @return nothing
print_stats <- function(x){
names <- names(summary_stats(x))
vals <- c(                     get_minimum(x),
get_percentile10(x),
get_quartile1(x),
get_median(x),
get_average(x),
get_quartile3(x),
get_percentile90(x),
get_maximum(x),
get_range(x),
get_stdev(x),
count_missing(x))
name <- format(names,width = 9,justify = "left")
value <- sprintf("%.4f", vals)
stats <- paste(name,": ",value,   sep = "")
cat(stats,sep = "\n")
}
#  @title rescale100()
#  @description rescale value
#  @param x is a val
#  @return a scaled version
rescale100 <- function(x,xmin,xmax){
z <- 100*((x-xmin)/(xmax-xmin))
return(z)
}
#  @title drop_lowest()
#  @description drop lowest score
#  @param x is a vector
#  @return a vector with lowest score dropped.
drop_lowest <- function(x){
x <- sort(x)
x <- x[-1]
return(x)
}
#  @title score_homework()
#  @description calculate hw score for student
#  @param hws is a vector
#  @return a averaged value of homework scores
score_homework <- function(hws, drop=TRUE){
if(drop == TRUE)
{
hws <- drop_lowest(hws)
}
return (get_average(hws, TRUE))
}
#  @title score_quiz()
#  @description calculate lab score for student
#  @param x is a vector
#  @return a averaged value of quiz scores
score_quiz <- function(x,drop=TRUE){
if(drop == TRUE)
{
quiz <- drop_lowest(x)
}
return (get_average(quiz, TRUE))
}
#  @title score_lab()
#  @description calculate lab score for student
#  @param lab is a val
#  @return a corresponding score
score_lab <- function(lab){
if (lab ==10)
return (80)
else if (lab == 9)
return (60)
else if (lab == 8)
return (40)
else if (lab == 7)
return (20)
else if (lab == 11 | lab==12)
return (100)
else if(lab == 6 | lab < 6)
return (0)
}
# read in csv file with raw scores
source("functions.R")
original = read.csv('../data/rawdata/rawscores.csv',stringsAsFactors = FALSE)
raw_score = original
#head(raw_score)
sink(file='../output/summary-rawscores.txt')
str(original)
sink()
for(i in 1:16){
sink('../output/summary-rawscores.txt',append = TRUE)
print(summary_stats(raw_score[,i]))
print(print_stats(raw_score[,i]))
sink()
}
for (i in 1:nrow(raw_score)) {
for (j in 1:ncol(raw_score)) {
if (is.na(raw_score[i,j])==TRUE)
raw_score[i,j] <- 0
}
}
raw_score <- raw_score
raw_score$QZ1 <- rescale100(raw_score$QZ1,xmin = 0,xmax = 12)
raw_score$QZ2 <- rescale100(raw_score$QZ2,xmin = 0,xmax = 18)
raw_score$QZ3 <- rescale100(raw_score$QZ3,xmin = 0,xmax = 20)
raw_score$QZ4 <- rescale100(raw_score$QZ4,xmin = 0,xmax = 20)
raw_score$Test1 <- rescale100(raw_score$EX1,xmin=0,xmax = 80)
raw_score$Test2 <- rescale100(raw_score$EX2,xmin=0,xmax = 90)
hw <- raw_score[,1:9]
raw_score$Homework <- round(apply(hw, 1, score_homework,drop=TRUE),0)
quiz <- raw_score[,11:14]
raw_score$Quiz <- round(apply(quiz,1, score_quiz,drop=TRUE),0)
#Add Lab
raw_score$Lab <- as.numeric(lapply(raw_score$ATT,function(x) score_lab(x)))
#Add Overall
raw_score$Overall <- raw_score$Lab *0.1+0.3* raw_score$Homework +0.15*raw_score$Quiz+0.2*raw_score$Test1+0.25*raw_score$Test2
grade_assign <- function(score){
if (score >=0 & score < 50)
return ("F")
else if (score >=50 & score < 60)
return ("D")
else if (score >=60 & score < 70)
return ("C-")
else if (score >=70 & score < 77.5)
return ("C")
else if (score >=77.5 & score < 79.5)
return ("C+")
else if (score >=79.5 & score < 82)
return ("B-")
else if (score >=82 & score < 86)
return ("B")
else if (score >=86 & score < 88)
return ("B+")
else if (score >=88 & score < 90)
return ("A-")
else if (score >=90 & score < 95)
return ("A")
else if (score >=95 & score <= 100)
return ("A+")
}
for (i in 1: 334){
raw_score$grade[i] <- grade_assign(raw_score$Overall[i])
}
#Export summary
files <- c("Lab", "Homework", "Quiz", "Test1", "Test2", "Overall")
for(i in 1:6){
file = files[i]
sink (file = paste("../output/", file, "-stats.txt"))
# read df by name using [[]]
print(summary_stats(raw_score[[file]]))
print(print_stats(raw_score[[file]]))
sink()
}
sink(file='../output/summary-cleanscores.txt')
str(raw_score)
sink()
write.csv(raw_score, file = '../data/cleandata/cleanscores.csv')
library(shiny); runApp('~/Desktop/stat133-hws-fall17/hw04/app/Grade_visualizer.R')
